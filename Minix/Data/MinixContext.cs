// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using Minix.Data;

namespace Minix
{
    public partial class MinixContext : DbContext
    {
        public virtual DbSet<View_Mag> View_Mags { get; set; }
        public virtual DbSet<articoli> articolis { get; set; }
        public virtual DbSet<reparto> repartos { get; set; }

        public virtual DbSet<user> users { get; set; }
        public MinixContext()
        {

        }

        public MinixContext(DbContextOptions<MinixContext> options) : base(options)
        {
        }
        public static IConfigurationRoot GetCongiguration()
        {
            var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
            return builder.Build();
        }

        public static string SetConnectionString(string DbContext)
        {

            try
            {
                var configuration = GetCongiguration();
                string con = configuration.GetSection("DBCONTEXT").GetSection(DbContext).GetSection("ConnectionString").Value.ToString();


                return con;
            }
            catch (Exception ex)
            {
                return ex.Message.ToString();

            }
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //optionsBuilder.UseSqlServer("Data Source=ALE-DEV\\MSSQLSERVER02;Initial Catalog=minix;User ID=sa;Password=Nmag6hxy");
                optionsBuilder.UseSqlServer(SetConnectionString("default"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<View_Mag>(entity =>
            {
               
                entity.ToView("View_Mag");


            });

            modelBuilder.Entity<articoli>(entity =>
            {
                entity.HasOne(d => d.ID_REPARTONavigation)
                    .WithMany(p => p.articolis)
                    .HasForeignKey(d => d.ID_REPARTO)
                    .HasConstraintName("FK_articoli_reparto");
            });

            modelBuilder.Entity<reparto>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}